     1                                  %define STDIN 0
     2                                  %define STDOUT 1
     3                                  %define STDERR 2
     4                                  %define SYSCALL_EXIT  1
     5                                  %define SYSCALL_READ  3
     6                                  %define SYSCALL_WRITE 4
     7                                  
     8                                  ;;  Offsets for fields in struct book.
     9                                  ;;
    10                                  %define AUTHOR_OFFSET 21
    11                                  %define TITLE_OFFSET 0
    12                                  %define SUBJECT_OFFSET 36
    13                                  %define YEAR_OFFSET 44
    14                                  
    15                                          extern book1, book2
    16                                  	
    17                                  	global bookcmp
    18                                  	
    19                                  	
    20                                  	_start:	 
    21                                  
    22                                  	;;  Call the compare function
    23 00000000 E900000000              		jmp bookcmp
    24                                  
    25                                  
    26                                  ;;; ; ;;;;;;;;;;;
    27                                  	
    28                                  	bookcmp:
    29                                  
    30                                  
    31                                  ;;;  Reserve all registers
    32 00000005 50                      	                push eax
    33 00000006 53                      	                push ebx
    34 00000007 51                      	                push ecx
    35 00000008 52                      	                push edx
    36                                  ;;;   Move book pointers into the registers
    37 00000009 8D1D[00000000]          	                lea ebx, [book1 + TITLE_OFFSET]
    38 0000000F 8D0D[00000000]          	                lea ecx, [book2 + TITLE_OFFSET]
    39                                  
    40                                  ;;;   Use eax as the final return
    41                                  ;;;   Use edx as your increment counter
    42 00000015 B800000000              			mov eax, 0
    43 0000001A BA00000000              			mov edx, 0
    44 0000001F E900000000              			jmp .tLoop
    45                                  	
    46                                  	
    47                                  ;;; ; ;;;;;;;;;
    48                                  
    49                                  	
    50                                  	.tLoop:
    51 00000024 01D3                    		add ebx, edx
    52 00000026 01D1                    		add ecx, edx
    53                                  	
    54 00000028 80FB00                  		cmp bl, 0x00
    55 0000002B 746C                    		je .nullCharT
    56                                  	;;  If you found a null character, handle it
    57                                  
    58                                  	;;  Else, keep comparing
    59 0000002D 39CB                    	        cmp ebx, ecx
    60 0000002F 7F5E                    		jg .retPos
    61                                  
    62 00000031 39CB                    		cmp ebx, ecx
    63 00000033 7C50                    		jl .retNeg 
    64                                  	
    65 00000035 81C201000000            		add edx, 1
    66 0000003B E9E4FFFFFF              		jmp .tLoop
    67                                  	
    68                                  	
    69                                  ;;; ;;;;;;;;;;;
    70                                  	.aLoop:
    71                                  
    72 00000040 01D3                    		add ebx, edx
    73 00000042 01D1                    		add ecx, edx
    74                                  
    75 00000044 80FB00                                  cmp bl, 0x00
    76 00000047 745A                    		je .nullCharA
    77                                  ;;;   If you found a null character, handle it
    78                                  
    79                                  ;;;   Else, keep comparing
    80 00000049 39CB                    		cmp ebx, ecx
    81 0000004B 7F42                    		jg .retPos
    82                                  	
    83 0000004D 39CB                    		cmp ebx, ecx
    84 0000004F 7C34                    		jl .retNeg
    85                                  
    86 00000051 81C201000000            		add edx, 1
    87 00000057 E9E4FFFFFF              		jmp .aLoop
    88                                  	
    89                                  	
    90                                  	
    91                                  	
    92                                  ;;; ;;;;;;;;;;;
    93                                  	.sLoop:
    94                                  
    95 0000005C 01D3                                    add ebx, edx
    96 0000005E 01D1                    		add ecx, edx
    97                                  	
    98 00000060 80FB00                  		cmp bl, 0x00
    99 00000063 7448                    		je .nullCharS
   100                                  ;;; ;   If you found a null character, handle it
   101                                  
   102                                  ;;; ;   Else, keep comparing
   103 00000065 39CB                    		cmp ebx, ecx
   104 00000067 7F26                    		jg .retPos
   105                                  		
   106 00000069 39CB                    		cmp ebx, ecx
   107 0000006B 7C18                    		jl .retNeg
   108                                  
   109 0000006D 81C201000000            		add edx, 1
   110 00000073 E9E4FFFFFF              		jmp .sLoop
   111                                  	
   112                                  	
   113                                  ;;; ; ;;;;;;;;;;;
   114                                  	
   115                                  	.yCmp:
   116                                  
   117                                  	;; If they are equal, never change eax from zero!
   118 00000078 39CB                    		cmp ebx, ecx
   119 0000007A 0F8482000000            		je .done
   120                                  
   121 00000080 E974000000              		jmp .finalComp
   122                                  	
   123                                  ;;; ; ;;;;;;;;;;;
   124                                  	;;  For iff book1 is less than and things are fine
   125                                  	.retNeg:
   126 00000085 B8FFFFFFFF              		mov eax, -1
   127 0000008A E973000000              		jmp .done
   128                                  	
   129                                  ;;; ; ;;;;;;;;;;;
   130                                  	;;  For if book1 is bigger and needs to switch
   131                                  	.retPos:
   132                                  
   133 0000008F B801000000              		mov eax, 1
   134 00000094 E969000000              		jmp .done
   135                                  	
   136                                  
   137                                  ;;; ; ;;;;;;;;;;;
   138                                  	.nullCharT:
   139 00000099 80F900                  		cmp cl, 0x00
   140 0000009C 7419                    		je .setZeroT
   141                                  	;; Finish and return -1 if cl is NOT zero
   142 0000009E E9E2FFFFFF                              jmp .retNeg
   143                                  	
   144                                  
   145                                  ;;; ;;;;;;;;;;;;;
   146                                          .nullCharA:
   147 000000A3 80F900                  		cmp cl, 0x00
   148 000000A6 7425                    		je .setZeroA
   149                                  
   150 000000A8 E9D8FFFFFF              		jmp .retNeg
   151                                  	
   152                                          .nullCharS:
   153 000000AD 80F900                  		cmp cl, 0x00
   154 000000B0 7431                    		je .setZeroS
   155                                  
   156 000000B2 E9CEFFFFFF                              jmp .retNeg
   157                                  	
   158                                  	.setZeroT:
   159                                  
   160 000000B7 8D1D[15000000]          		lea ebx, [book1 + AUTHOR_OFFSET]
   161 000000BD 8D0D[15000000]          		lea ecx, [book2 + AUTHOR_OFFSET]
   162                                  	
   163 000000C3 BA00000000              		mov edx, 0
   164 000000C8 E973FFFFFF              		jmp .aLoop
   165                                  	
   166                                  	.setZeroA:
   167 000000CD 8D1D[24000000]                          lea ebx, [book1 + SUBJECT_OFFSET]
   168 000000D3 8D0D[24000000]          		lea ecx, [book2 + SUBJECT_OFFSET]
   169                                  	
   170 000000D9 BA00000000                              mov edx, 0
   171 000000DE E979FFFFFF              		jmp .sLoop
   172                                  	
   173                                  	.setZeroS:
   174 000000E3 8D1D[2C000000]                          lea ebx, [book1 + YEAR_OFFSET]
   175 000000E9 8D0D[2C000000]          		lea ecx, [book2 + YEAR_OFFSET]
   176                                  	
   177 000000EF BA00000000                      	mov edx, 0
   178 000000F4 E97FFFFFFF              		jmp .yCmp
   179                                  
   180                                  	.finalComp:
   181 000000F9 39CB                    		cmp ebx, ecx
   182 000000FB 7F92                    		jg .retPos
   183                                  	
   184 000000FD E983FFFFFF              		jmp .retNeg	
   185                                  	.done:
   186                                  
   187                                  ;;; ;   Return everything except for eax because eax will return
   188 00000102 5A                      		pop edx
   189 00000103 59                      		pop ecx
   190 00000104 5B                      		pop ebx
   191                                  	
